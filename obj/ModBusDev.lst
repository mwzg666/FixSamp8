C251 COMPILER V5.60.0,  ModBusDev                                                          19/10/23  10:22:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE ModBusDev
OBJECT MODULE PLACED IN .\obj\ModBusDev.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE ModBus\ModBusDev.c XSMALL OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Ads1110;.\
                    -Flash;.\mcp4725;.\IIC;.\MwPro;.\Uart;.\Lcd;.\ModBus;.\Temperaturn) PRINT(.\obj\ModBusDev.lst) OBJECT(.\obj\ModBusDev.obj
                    -) 

stmt  level    source

    1          #include <stdio.h>
    2          #include <stdlib.h>
    3          #include <string.h>
    4          
    5          
    6          #include "main.h"
    7          #include "Lcd.h"
    8          #include "LcdApp.h"
    9          #include "ModBus.h"
   10          #include "ModBusDev.h"
   11          #include "uart.h"
   12          
   13          
   14          MODBUS_PARAM xdata ModBusParam;
   15          MODBUS_STATUS xdata ModBusStatus;
   16          MODBUS_INFO xdata ModBusInfo;
   17          
   18          
   19          
   20          /*
   21          ModBus 帧格式
   22          1. 发送帧
   23          地址           命令     寄存器    寄存器数量    数据                                             CRC   
   24          0A(固定值)     Cmd(1)   RX(2)     n(2)          无数据表示读取、有数据表示写对应的寄存器 
   25          
   26          数据定义:  长度 + 数据
   27                     n*2    dat(n*2)
   28          
   29          2. 应答帧 -- 返回数据
   30          地址           命令   数据长度    数据      CRC   
   31          0A(固定值)     Cmd    n(1)        dat(n)
   32          
   33          3. 应答帧 -- 返回状态
   34          地址           命令   寄存器   寄存器数量     CRC   
   35          0A(固定值)     Cmd    Rx(2)    n(2)                       
   36          */
   37          
   38          
   39          DEVICE_READ_ACK xdata  DevReadAck;   
   40          
   41          DEVICE_WRITE_ACK xdata DevWriteAck;
   42          
   43          HOST_SEND_FRAME xdata RecvFrame;   
   44          
   45          
   46          // 把浮点数转换为大端打包到发送数据区
   47          void PackageFloatValue(WORD Offset, float val)
   48          {
   49   1          BYTE temp[4] = {0};
   50   1          FloatToBytes(val,temp);
   51   1          memcpy(&DevReadAck.Data[Offset], temp, 4);  
   52   1      }
   53          
   54          void PackageDWordValue(WORD Offset, DWORD val)
   55          {
   56   1          DWORD temp;
   57   1          temp = SwEndian(val);
C251 COMPILER V5.60.0,  ModBusDev                                                          19/10/23  10:22:02  PAGE 2   

   58   1          memcpy(&DevReadAck.Data[Offset], &temp, 4);  
   59   1      }
   60          
   61          
   62          void PackageWordValue(WORD Offset, WORD val)
   63          {
   64   1          BYTE temp[2] = {0};
   65   1          temp[0] = (BYTE)(val >> 8);
   66   1          temp[1] = (BYTE)val;
   67   1          memcpy(&DevReadAck.Data[Offset], temp, 2);  
   68   1      }
   69          
   70          // 把寄存器值包装到发送缓存
   71          bool PackageReg(WORD Reg, WORD Count)
   72          {
   73   1          DWORD offset;
   74   1          BYTE *p;
   75   1      
   76   1          if (Count > 128)
   77   1          {
   78   2              return false;
   79   2          }
   80   1      
   81   1          if (Reg >= MODBUS_INFO_ADD)
   82   1          {
   83   2              offset = (Reg - MODBUS_INFO_ADD)*2;
   84   2              if (offset >= sizeof(MODBUS_INFO))
   85   2              {
   86   3                  return false;
   87   3              }
   88   2              
   89   2              p = (BYTE *)&ModBusInfo;
   90   2              //memcpy(&ModBusInfo,&RecvFrame.Data, Count*2);
   91   2              memcpy(DevReadAck.Data, &p[offset], Count*2);  
   92   2          }
   93   1          else if (Reg >= MODBUS_STATUS_ADD)
   94   1          {
   95   2              offset = (Reg - MODBUS_STATUS_ADD)*2;
   96   2              if (offset >= sizeof(MODBUS_STATUS))
   97   2              {
   98   3                  return false;
   99   3              }
  100   2              
  101   2              p = (BYTE *)&ModBusStatus;
  102   2              //memcpy(&ModBusStatus,&RecvFrame.Data, Count*2);
  103   2              memcpy(DevReadAck.Data, &p[offset], Count*2);  
  104   2          }
  105   1          else if (Reg >= MODBUS_PARAM_ADD)
  106   1          {
  107   2              offset = (Reg - MODBUS_PARAM_ADD)*2;
  108   2              if (offset >= sizeof(MODBUS_PARAM))
  109   2              {
  110   3                  return false;
  111   3              }
  112   2              
  113   2              p = (BYTE *)&ModBusParam;
  114   2              //memcpy(&ModBusParam,&RecvFrame.Data, Count*2);
  115   2              memcpy(DevReadAck.Data, &p[offset], Count*2); 
  116   2          }
  117   1          else
  118   1          {
  119   2              return false;
  120   2          }
  121   1      
  122   1          return true;
  123   1      }
C251 COMPILER V5.60.0,  ModBusDev                                                          19/10/23  10:22:02  PAGE 3   

  124          
  125          //保存读数据
  126          void ModBusSave()
  127          {
  128   1          BYTE i = 0;
  129   1      //    SysParam.AlarmThres = ModBusParam.AlamrThres;
  130   1      //    SysParam.SampVol = ModBusParam.SampFlow;
  131   1      //    SysParam.SampMode = ModBusParam.SampMode;
  132   1      //    SysParam.SampTime = ModBusParam.SampTime;
  133   1      //    SysParam.SampVol = ModBusParam.SampVol;
  134   1          SysParam.Enable = ModBusParam.ChEnable;
  135   1          SysParam.RemCtlFlag = ModBusParam.RemCtlFlag;
  136   1      //    for(i = 0;i < 8;i++)
  137   1      //    {
  138   1      //         //SysParam.Valve[i] = ModBusParam.ChValve[i];
  139   1      //    }
  140   1      
  141   1      //    SysParam.TotleTime  = ModBusStatus.TotleTime;               
  142   1      //    SysParam.TotleFlow =  ModBusStatus.TotleVol;                
  143   1      //
  144   1      //    RunStatus.TotleFlow =  ModBusStatus.SampleFlow;              
  145   1      //    RunStatus.TotleVol =  ModBusStatus.SampleVol;               
  146   1                         
  147   1          //SysParam.SampTime = (ModBusStatus.RemTime +  RunStatus.RunTime)/60;
  148   1      //    RunStatus.RunTime =  ModBusStatus.RunTime;                 
  149   1          RunStatus.Running = ModBusStatus.RunStatus;               
  150   1      
  151   1      //    for (i = 0;i<CHANNLE_NUM;i++)
  152   1      //    {
  153   1      //       RunStatus.Flow[i] = ModBusStatus.ChFlow[i];
  154   1      //       RunStatus.Volume[i] = ModBusStatus.ChVol[i];
  155   1      //    }
  156   1      
  157   1          SysParam.Address = ModBusInfo.Address;
  158   1          
  159   1          WriteParam();
  160   1      }
  161          
  162          //从设备读应答处理
  163          BYTE ReadAck()
  164          {
  165   1          WORD i = 0;
  166   1          WORD reg = 0;   
  167   1          memcpy(&reg, &ReadAckFrame.Data[0], 2);
  168   1      
  169   1          if(reg == RemRegAddr.SypAddr)
  170   1          {
  171   2              memcpy(&ModBusParam, (WORD *)&ReadAckFrame.Data, sizeof(MODBUS_PARAM));
  172   2          }
  173   1          if(reg == RemRegAddr.StuAddr)
  174   1          {
  175   2              memcpy(&ModBusStatus, &ReadAckFrame.Data, sizeof(MODBUS_STATUS));
  176   2          }
  177   1          if(reg == RemRegAddr.InfoAddr)
  178   1          {
  179   2              memcpy(&ModBusInfo, &ReadAckFrame.Data, sizeof(MODBUS_INFO));
  180   2          }
  181   1      
  182   1          ModBusSave();
  183   1          
  184   1          return true;
  185   1      }
  186          
  187          #if 0
               // 写命令应答处理
               void WriteAck(BYTE Mode)
C251 COMPILER V5.60.0,  ModBusDev                                                          19/10/23  10:22:02  PAGE 4   

               {
                   WORD crc;
                   memset(&DevWriteAck, 0, sizeof(DEVICE_WRITE_ACK));
                   
                   DevWriteAck.Address = RecvFrame.Address;  //Param.DevAddr;
                   DevWriteAck.FunctionCode = RecvFrame.FunctionCode;
                   DevWriteAck.RegAddr = RegSw(RecvFrame.RegAddr);
                   DevWriteAck.RegCount = RegSw(RecvFrame.RegCount);
               
                   crc = CRC16Calc((BYTE *)&DevWriteAck, 6);
                   DevWriteAck.Crc = crc;
               
                   if (Mode == RS485)
                   {
                       Uart4Send((BYTE *)&DevWriteAck, sizeof(DEVICE_WRITE_ACK));
                   }
               }
               
               // 把接收到的数据加载到寄存器中
               bool WriteRegValue(WORD Reg, WORD Count)
               {
                   //BYTE *p;
                   int len,offset;
                   
                   // 写设备地址
                   if ((Reg == MODBUS_INFO_ADD) && (Count == 1))
                   {
                       SysParam.Address = WriteAckFrame.Address;// RecvFrame.Data[2];
                       WriteParam();
                       return true;
                   }
               
                   // 远程控制
               //    if ((Reg == MODBUS_REM_CTL) && (Count == 1))
               //    {
               //        SysParam.SampMode = RecvFrame.Data[1];
               //        if (RecvFrame.Data[2] == 1)
               //        {
               //            StartSamp();
               //        }
               //        else
               //        {
               //            StopSamp(false);
               //        }
               //        return true;
               //    }
               
                    if ((Reg == MODBUS_STATUS_ADD) && (Count == 1))
                   {
                       //ModBusSaveStatus();
                       return true;
                   }
                    
                   if (Reg >= MODBUS_PARAM_ADD) 
                   {
                       len = sizeof(MODBUS_PARAM);
                       offset = (Reg - MODBUS_PARAM_ADD) * 2;
                       if ( (offset + Count * 2) > len )
                       {
                           return false;
                       }
                       //p = (BYTE *)&ModBusParam;
                       //memcpy(&p[offset], &RecvFrame.Data[1], Count*2);
                       //ModBusSaveParam();
                       return true;
                   }
C251 COMPILER V5.60.0,  ModBusDev                                                          19/10/23  10:22:02  PAGE 5   

                   
                   return false;
               }
               #endif
  260          
  261          //写应答处理
  262          bool WriteAckDev(BYTE Mode)
  263          {
  264   1         
  265   1          //if (WriteAckFrame.Crc == 0)
  266   1         //{
  267   1             //return;
  268   1         //}
  269   1         //printf("Write = OK");
  270   1         //return true;
  271   1          //WriteRegValue(WriteAckFrame.RegAddr, WriteAckFrame.RegCount);
  272   1      }
*** WARNING C47 IN LINE 262 OF ModBus\ModBusDev.c: 'Mode': unreferenced parameter
  273          
  274          //Modbus读写解析
  275          void HndModBusRecv(BYTE Mode, BYTE *buf, BYTE len)
  276          {
  277   1          if (!ValidRtuFrame(buf, len))
  278   1          {
  279   2              return;
  280   2          }
  281   1          memset(&ReadAckFrame, 0, sizeof(DEVICE_READ_ACK));
  282   1          memset(&WriteAckFrame, 0, sizeof(DEVICE_WRITE_ACK));
  283   1          if(buf[0]!= SysParam.Address)
  284   1          {
  285   2              return;
  286   2          }
  287   1          switch(buf[1])
  288   1          {
  289   2              case CMD_READ_REG:
  290   2              {
  291   3                  memcpy(&ReadAckFrame, buf, len);
  292   3                  ReadAck(); break; 
  293   3                   
  294   3              }
  295   2              case CMD_WRITE_REG:
  296   2              {
  297   3                  memcpy(&WriteAckFrame, buf, len);
  298   3                  WriteAckDev(Mode);  break;
  299   3              }
  300   2          }
  301   1      }
  302          
  303          
  304          
*** WARNING C135 IN LINE 272 OF ModBus\ModBusDev.c: 'WriteAckDev': no return value
*** WARNING C135 IN LINE 272 OF ModBus\ModBusDev.c: 'WriteAckDev': no return value


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       851     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       567     ------
  xdata-const size     =    ------     ------
  edata size           =        49     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
C251 COMPILER V5.60.0,  ModBusDev                                                          19/10/23  10:22:02  PAGE 6   

  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
